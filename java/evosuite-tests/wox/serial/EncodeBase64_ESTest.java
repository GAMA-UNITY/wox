/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 26 00:33:01 SGT 2014
 */

package wox.serial;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.EvoSuiteFile;
import org.junit.runner.RunWith;
import wox.serial.EncodeBase64;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, resetStaticState = true) 
public class EncodeBase64_ESTest extends EncodeBase64_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 wox.serial.EncodeBase64.encode3Bytes([BII[BI)V: I53 Branch 10 TABLESWITCH L225 Case 2 - true
   * 2 wox.serial.EncodeBase64.decode4Bytes([BI[BI)I: I54 Branch 19 IF_ICMPNE L372 - false
   * 3 wox.serial.EncodeBase64.encode([B)[B: I42 Branch 2 IF_ICMPNE L100 - false
   */

  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = EncodeBase64.encode(byteArray0);
      byte[] byteArray2 = EncodeBase64.encode(byteArray1);
      byte[] byteArray3 = EncodeBase64.decode(byteArray2);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray3);
      assertNotNull(byteArray3);
  }

  //Test case number: 1
  /*
   * 14 covered goals:
   * 1 wox.serial.EncodeBase64.encode3Bytes([BII[BI)V: I17 Branch 7 IF_ICMPLE L202 - true
   * 2 wox.serial.EncodeBase64.encode3Bytes([BII[BI)V: I34 Branch 8 IF_ICMPLE L202 - true
   * 3 wox.serial.EncodeBase64.encode3Bytes([BII[BI)V: I53 Branch 9 TABLESWITCH L225 Case 1 - true
   * 4 wox.serial.EncodeBase64.encode3Bytes([BII[BI)V: I53 Branch 11 TABLESWITCH L225 Case 3 - false
   * 5 wox.serial.EncodeBase64.decode([B)[B: I75 Branch 15 IF_ICMPLT L297 - false
   * 6 wox.serial.EncodeBase64.decode([B)[B: I87 Branch 16 IF_ICMPLE L301 - true
   * 7 wox.serial.EncodeBase64.decode([B)[B: I87 Branch 16 IF_ICMPLE L301 - false
   * 8 wox.serial.EncodeBase64.decode([B)[B: I106 Branch 17 IF_ICMPNE L312 - true
   * 9 wox.serial.EncodeBase64.decode([B)[B: I106 Branch 17 IF_ICMPNE L312 - false
   * 10 wox.serial.EncodeBase64.decode4Bytes([BI[BI)I: I8 Branch 18 IF_ICMPNE L358 - true
   * 11 wox.serial.EncodeBase64.decode4Bytes([BI[BI)I: I8 Branch 18 IF_ICMPNE L358 - false
   * 12 wox.serial.EncodeBase64.decode4Bytes([BI[BI)I: I54 Branch 19 IF_ICMPNE L372 - true
   * 13 wox.serial.EncodeBase64.encode([B)[B: I31 Branch 1 IF_ICMPNE L96 - false
   * 14 wox.serial.EncodeBase64.encode([B)[B: I132 Branch 5 IF_ICMPGE L146 - false
   */

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = EncodeBase64.encode(byteArray0);
      byte[] byteArray2 = EncodeBase64.decode(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 wox.serial.EncodeBase64.decode([B)[B: I70 Branch 14 IF_ICMPLT L296 - true
   */

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = EncodeBase64.decode(byteArray0);
      assertNull(byteArray1);
  }

  //Test case number: 3
  /*
   * 4 covered goals:
   * 1 wox.serial.EncodeBase64.decode([B)[B: I50 Branch 13 IF_ICMPGE L285 - true
   * 2 wox.serial.EncodeBase64.decode([B)[B: I50 Branch 13 IF_ICMPGE L285 - false
   * 3 wox.serial.EncodeBase64.decode([B)[B: I70 Branch 14 IF_ICMPLT L296 - false
   * 4 wox.serial.EncodeBase64.decode([B)[B: I75 Branch 15 IF_ICMPLT L297 - true
   */

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)32;
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byte[] byteArray1 = EncodeBase64.decode(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
  }

  //Test case number: 4
  /*
   * 14 covered goals:
   * 1 wox.serial.EncodeBase64.encode3Bytes([BII[BI)V: I3 Branch 6 IFLE L202 - false
   * 2 wox.serial.EncodeBase64.encode3Bytes([BII[BI)V: I17 Branch 7 IF_ICMPLE L202 - false
   * 3 wox.serial.EncodeBase64.encode3Bytes([BII[BI)V: I34 Branch 8 IF_ICMPLE L202 - false
   * 4 wox.serial.EncodeBase64.encode3Bytes([BII[BI)V: I53 Branch 9 TABLESWITCH L225 Case 1 - false
   * 5 wox.serial.EncodeBase64.encode3Bytes([BII[BI)V: I53 Branch 10 TABLESWITCH L225 Case 2 - false
   * 6 wox.serial.EncodeBase64.encode3Bytes([BII[BI)V: I53 Branch 11 TABLESWITCH L225 Case 3 - true
   * 7 wox.serial.EncodeBase64.encode3Bytes([BII[BI)V: I53 Branch 12 TABLESWITCH L225 Default-Case - false
   * 8 wox.serial.EncodeBase64.encode([B)[B: I31 Branch 1 IF_ICMPNE L96 - true
   * 9 wox.serial.EncodeBase64.encode([B)[B: I42 Branch 2 IF_ICMPNE L100 - true
   * 10 wox.serial.EncodeBase64.encode([B)[B: I91 Branch 3 IF_ICMPGE L129 - true
   * 11 wox.serial.EncodeBase64.encode([B)[B: I91 Branch 3 IF_ICMPGE L129 - false
   * 12 wox.serial.EncodeBase64.encode([B)[B: I107 Branch 4 IF_ICMPNE L136 - true
   * 13 wox.serial.EncodeBase64.encode([B)[B: I107 Branch 4 IF_ICMPNE L136 - false
   * 14 wox.serial.EncodeBase64.encode([B)[B: I132 Branch 5 IF_ICMPGE L146 - true
   */

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      byte[] byteArray1 = EncodeBase64.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)10}, byteArray1);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 wox.serial.EncodeBase64.<init>()V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      EncodeBase64 encodeBase64_0 = new EncodeBase64();
  }
}
